// $Id: dragonflyconfig 3555 2011-05-16 23:37:55Z dub $

// Copyright (c) 2007-2015, Trustees of The Leland Stanford Junior University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.


hold_switch_for_packet=0;
num_vcs     = 1;
vc_buf_size = 32; //32
chan_latency = 10; //10
wait_for_tail_credit = 0;

// SIMULATION MODE
sim_type = batch;
batch_size = 100;
batch_injection_rate = 0.9;
max_outstanding_requests = 0;


// ROUTER ARCHITECTURE
vc_allocator = islip;
sw_allocator = islip;
priority = none;

alloc_iters  = 3;

credit_delay   = 0;
routing_delay  = 1;
vc_alloc_delay = 1;
sw_alloc_delay = 1;
st_final_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.6;
warmup_periods = 3;
sim_count      = 1;
sample_period  = 10000;


// ROUTING
// routing_function = nca_hybrid;
routing_function = nca;

// TRAFFIC
// traffic = uniform_sel;
traffic = uniform;
// traffic = randperm;

classes = 1;

seed = 0;
injection_rate_uses_flits = 1;
message_size = 32;
packet_size = 32;


// USE REQUEST-REPLY
use_read_write = 0;

read_request_message_size = 1;
read_reply_message_size = 32;
write_request_message_size = 32;
write_reply_message_size = 1;

read_request_size = 1;
read_reply_size = 32;
write_request_size = 32;
write_reply_size = 1;
write_fraction = 0.5;

// VC ASSIGNMENTS
// Depends on how many VCs are being used
read_request_begin_vc  = 0;
read_request_end_vc    = 0;
write_reply_begin_vc   = 1;
write_reply_end_vc     = 1;
read_reply_begin_vc    = 1;
read_reply_end_vc      = 1;
write_request_begin_vc = 0;
write_request_end_vc   = 0;

// NETWORK
topology = fattree;
k  = 16;
n  = 2;
compute_nodes = 256;
memory_nodes = 0;
watch_out=-;